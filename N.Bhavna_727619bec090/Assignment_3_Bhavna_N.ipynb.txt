{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "5de29450",
      "metadata": {
        "id": "5de29450"
      },
      "source": [
        "# Import Required Libraries"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5641069f",
      "metadata": {
        "id": "5641069f"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9783647a",
      "metadata": {
        "id": "9783647a"
      },
      "source": [
        "# Image Augmentation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c7a73bc5",
      "metadata": {
        "id": "c7a73bc5"
      },
      "outputs": [],
      "source": [
        "IMG_SHAPE = 128\n",
        "IMG_FOLDER = \"./flowers/\"\n",
        "BATCH_SIZE = 64"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "79eb1ba9",
      "metadata": {
        "id": "79eb1ba9"
      },
      "outputs": [],
      "source": [
        "datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1/255.0, shear_range=0.2, zoom_range=0.2, \n",
        "                                                          rotation_range=45, horizontal_flip=True, vertical_flip=True,\n",
        "                                                          validation_split=0.2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ccf809f6",
      "metadata": {
        "id": "ccf809f6",
        "outputId": "e9248d52-097c-4482-ca52-46f88e0c6bca"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Found 3457 images belonging to 5 classes.\n",
            "Found 860 images belonging to 5 classes.\n"
          ]
        }
      ],
      "source": [
        "train = datagen.flow_from_directory(IMG_FOLDER, target_size=(IMG_SHAPE,IMG_SHAPE), color_mode='rgb',\n",
        "                                    class_mode='categorical', keep_aspect_ratio=True, batch_size=BATCH_SIZE,\n",
        "                                    shuffle=True, subset='training')\n",
        "test = datagen.flow_from_directory(IMG_FOLDER, target_size=(IMG_SHAPE,IMG_SHAPE), color_mode='rgb',\n",
        "                                class_mode='categorical', keep_aspect_ratio=True, batch_size=BATCH_SIZE,\n",
        "                                shuffle=False, subset='validation')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "dda2221b",
      "metadata": {
        "id": "dda2221b"
      },
      "source": [
        "# Create the Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b198861e",
      "metadata": {
        "id": "b198861e"
      },
      "outputs": [],
      "source": [
        "model = tf.keras.models.Sequential()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "115a965a",
      "metadata": {
        "id": "115a965a"
      },
      "source": [
        "# Add Layers to the Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "69267d10",
      "metadata": {
        "id": "69267d10",
        "outputId": "88f1c93a-3679-4595-abf6-d6714f81d896"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d (Conv2D)             (None, 126, 126, 16)      448       \n",
            "                                                                 \n",
            " conv2d_1 (Conv2D)           (None, 126, 126, 16)      2320      \n",
            "                                                                 \n",
            " max_pooling2d (MaxPooling2D  (None, 63, 63, 16)       0         \n",
            " )                                                               \n",
            "                                                                 \n",
            " conv2d_2 (Conv2D)           (None, 61, 61, 32)        4640      \n",
            "                                                                 \n",
            " conv2d_3 (Conv2D)           (None, 61, 61, 32)        9248      \n",
            "                                                                 \n",
            " max_pooling2d_1 (MaxPooling  (None, 30, 30, 32)       0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " conv2d_4 (Conv2D)           (None, 28, 28, 64)        18496     \n",
            "                                                                 \n",
            " conv2d_5 (Conv2D)           (None, 28, 28, 64)        36928     \n",
            "                                                                 \n",
            " max_pooling2d_2 (MaxPooling  (None, 14, 14, 64)       0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " conv2d_6 (Conv2D)           (None, 12, 12, 128)       73856     \n",
            "                                                                 \n",
            " conv2d_7 (Conv2D)           (None, 12, 12, 128)       147584    \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 18432)             0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 128)               2359424   \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 64)                8256      \n",
            "                                                                 \n",
            " dense_2 (Dense)             (None, 5)                 325       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 2,661,525\n",
            "Trainable params: 2,661,525\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "model.add(tf.keras.layers.Input((IMG_SHAPE,IMG_SHAPE,3)))\n",
        "model.add(tf.keras.layers.Conv2D(16, 3, activation='relu'))\n",
        "model.add(tf.keras.layers.Conv2D(16, 3, padding='same', activation='relu'))\n",
        "model.add(tf.keras.layers.MaxPool2D(2))\n",
        "model.add(tf.keras.layers.Conv2D(32, 3, activation='relu'))\n",
        "model.add(tf.keras.layers.Conv2D(32, 3, padding='same', activation='relu'))\n",
        "model.add(tf.keras.layers.MaxPool2D(2))\n",
        "model.add(tf.keras.layers.Conv2D(64, 3, activation='relu'))\n",
        "model.add(tf.keras.layers.Conv2D(64, 3, padding='same', activation='relu'))\n",
        "model.add(tf.keras.layers.MaxPool2D(2))\n",
        "model.add(tf.keras.layers.Conv2D(128, 3, activation='relu'))\n",
        "model.add(tf.keras.layers.Conv2D(128, 3, padding='same', activation='relu'))\n",
        "model.add(tf.keras.layers.Flatten())\n",
        "model.add(tf.keras.layers.Dense(128, activation='relu'))\n",
        "model.add(tf.keras.layers.Dense(64, activation='relu'))\n",
        "model.add(tf.keras.layers.Dense(5, activation='softmax'))\n",
        "\n",
        "model.summary()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2ca721ce",
      "metadata": {
        "id": "2ca721ce"
      },
      "source": [
        "# Compile the Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6920c1c6",
      "metadata": {
        "id": "6920c1c6"
      },
      "outputs": [],
      "source": [
        "model.compile(loss='categorical_crossentropy', optimizer=tf.keras.optimizers.Adam(1e-4), metrics=['accuracy'])"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "26246343",
      "metadata": {
        "id": "26246343"
      },
      "source": [
        "# Fit the Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "09668d4c",
      "metadata": {
        "id": "09668d4c",
        "outputId": "3da3c7f5-9346-402c-e05f-6be6c010b017"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/25\n",
            "55/55 [==============================] - 13s 167ms/step - loss: 1.5647 - accuracy: 0.2583\n",
            "Epoch 2/25\n",
            "55/55 [==============================] - 9s 169ms/step - loss: 1.3117 - accuracy: 0.4220\n",
            "Epoch 3/25\n",
            "55/55 [==============================] - 9s 168ms/step - loss: 1.2742 - accuracy: 0.4492\n",
            "Epoch 4/25\n",
            "55/55 [==============================] - 9s 167ms/step - loss: 1.2004 - accuracy: 0.4782\n",
            "Epoch 5/25\n",
            "55/55 [==============================] - 9s 168ms/step - loss: 1.1626 - accuracy: 0.4973\n",
            "Epoch 6/25\n",
            "55/55 [==============================] - 9s 168ms/step - loss: 1.1296 - accuracy: 0.5242\n",
            "Epoch 7/25\n",
            "55/55 [==============================] - 9s 167ms/step - loss: 1.1192 - accuracy: 0.5236\n",
            "Epoch 8/25\n",
            "55/55 [==============================] - 9s 167ms/step - loss: 1.1265 - accuracy: 0.5308\n",
            "Epoch 9/25\n",
            "55/55 [==============================] - 9s 168ms/step - loss: 1.0652 - accuracy: 0.5652\n",
            "Epoch 10/25\n",
            "55/55 [==============================] - 9s 168ms/step - loss: 1.0664 - accuracy: 0.5652\n",
            "Epoch 11/25\n",
            "55/55 [==============================] - 9s 172ms/step - loss: 1.0477 - accuracy: 0.5710\n",
            "Epoch 12/25\n",
            "55/55 [==============================] - 9s 168ms/step - loss: 1.0329 - accuracy: 0.5736\n",
            "Epoch 13/25\n",
            "55/55 [==============================] - 9s 169ms/step - loss: 0.9977 - accuracy: 0.5930\n",
            "Epoch 14/25\n",
            "55/55 [==============================] - 9s 167ms/step - loss: 0.9795 - accuracy: 0.6075\n",
            "Epoch 15/25\n",
            "55/55 [==============================] - 9s 169ms/step - loss: 0.9663 - accuracy: 0.6138\n",
            "Epoch 16/25\n",
            "55/55 [==============================] - 9s 167ms/step - loss: 1.0038 - accuracy: 0.5962\n",
            "Epoch 17/25\n",
            "55/55 [==============================] - 9s 168ms/step - loss: 0.9437 - accuracy: 0.6193\n",
            "Epoch 18/25\n",
            "55/55 [==============================] - 9s 169ms/step - loss: 0.9444 - accuracy: 0.6266\n",
            "Epoch 19/25\n",
            "55/55 [==============================] - 9s 169ms/step - loss: 1.0283 - accuracy: 0.5863\n",
            "Epoch 20/25\n",
            "55/55 [==============================] - 9s 171ms/step - loss: 0.9238 - accuracy: 0.6231\n",
            "Epoch 21/25\n",
            "55/55 [==============================] - 9s 170ms/step - loss: 0.9117 - accuracy: 0.6358\n",
            "Epoch 22/25\n",
            "55/55 [==============================] - 9s 168ms/step - loss: 0.8958 - accuracy: 0.6451\n",
            "Epoch 23/25\n",
            "55/55 [==============================] - 9s 170ms/step - loss: 0.8946 - accuracy: 0.6404\n",
            "Epoch 24/25\n",
            "55/55 [==============================] - 9s 168ms/step - loss: 0.9289 - accuracy: 0.6242\n",
            "Epoch 25/25\n",
            "55/55 [==============================] - 9s 168ms/step - loss: 0.9256 - accuracy: 0.6407\n"
          ]
        }
      ],
      "source": [
        "hist = model.fit(train, epochs=25)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "17771d1e",
      "metadata": {
        "id": "17771d1e"
      },
      "source": [
        "# Save the Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "beba0483",
      "metadata": {
        "id": "beba0483"
      },
      "outputs": [],
      "source": [
        "model.save(\"flowers.h5\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c4ee21ca",
      "metadata": {
        "id": "c4ee21ca"
      },
      "source": [
        "# Test the Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2d39be27",
      "metadata": {
        "id": "2d39be27",
        "outputId": "70e3ac43-cd0e-4224-e294-403e129b27ac"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "14/14 [==============================] - 2s 156ms/step - loss: 0.9511 - accuracy: 0.6198\n"
          ]
        }
      ],
      "source": [
        "loss, acc = model.evaluate(test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3438abe2",
      "metadata": {
        "id": "3438abe2",
        "outputId": "fbd8291c-44f1-4594-a5a5-575debd26fde"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Loss Value for Test Data : 0.95\n",
            "Accuracy for Test Data : 0.62\n"
          ]
        }
      ],
      "source": [
        "print(f\"Loss Value for Test Data : {loss:0.2f}\")\n",
        "print(f\"Accuracy for Test Data : {acc:0.2f}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bf955165",
      "metadata": {
        "id": "bf955165",
        "outputId": "ba3427d5-95bc-4b6b-9f7f-36260e40b36a"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.plot(hist.history['loss'])\n",
        "plt.title(\"Loss Value over Epochs\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a80ef3cf",
      "metadata": {
        "id": "a80ef3cf",
        "outputId": "09dec509-0eca-47e4-82ae-0fd424b9b62f"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.plot(hist.history['accuracy'])\n",
        "plt.title(\"Accuracy over Epochs\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.13"
    },
    "colab": {
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}